@mixin img-replace($img, $w, $h, $disp: block) {
	background-image: url('#{$path-img}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

@mixin text ($size, $l-height: null, $weight: null, $color: null) {
    font-size: $size;
    line-height: $l-height;
    font-weight: $weight;
    color: $color;
}
// Box sizing
@mixin box-sizing($type) {
	-webkit-box-sizing: $type;
	-moz-box-sizing: $type;
	box-sizing: $type;
  }
  
  
  // Font size
  @mixin font-size($size) {
	font-size: $size;
	font-size: ($size / 16px) * 1em;
  }
  
  
  // Flexbox / Settings
  @mixin flexbox {
	  display: -ms-flexbox; // ie
	  display: -webkit-flex; 
	  display: flex; 
	}
  
  @mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-ms-flex: $values;
	-webkit-flex: $values;
	flex: $values;
  }
  
  @mixin flex-order($order) {
	-ms-flex-order: $order; // ie
	-webkit-order: $order;
	order: $order;
  }
  
  @mixin flex-direction($direction) {
	@if $direction == column {
	  -webkit-flex-direction:vertical;
	  -moz-flex-direction:vertical;
	  -ms-flex-direction:column;
	  -webkit-flex-direction:column;
	  flex-direction:column;
	}
	@else {
	   -webkit-flex-direction:horizontal;
	   -moz-flex-direction:horizontal;
	   -ms-flex-direction:row;
	   -webkit-flex-direction:row;
	   flex-direction:row;
	}
  }
  
  
  // Media queries
  @mixin mq($mq-breakpoint, $mq-breakpoints: $breakpoints) {
	// If $mq-breakpoint is a key that exists in 
	// $mq-breakpoints, get and use the value
	@if map-has-key($mq-breakpoints, $mq-breakpoint) {
	  $mq-breakpoint: map-get($mq-breakpoints, $mq-breakpoint);
	}
  
	@media screen and (min-width: #{$mq-breakpoint}) {
	  @content;
	}
  }
  
  
  // BEM selectors
  @mixin element($element) {
	&__#{$element} {
	  @content;
	}
  }
  @mixin e($element) {
	@include element($element) {
	  @content;
	}
  }
  
  
  @mixin modifier($modifier) {
	&--#{$modifier} {
	  @content;
	}
  }
  @mixin m($modifier) {
	@include modifier($modifier) {
	  @content;
	}
  }